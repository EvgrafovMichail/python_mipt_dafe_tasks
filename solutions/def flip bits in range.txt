def flip_bits_in_range(num: int, left_bit: int, right_bit: int) -> int:
    b = (1 << right_bit) - 1
    a = (1 << (left_bit-1)) -1
    one_ab = b ^ a
    num = num ^ one_ab
    return num

print(flip_bits_in_range(8,1,3))


import time

def get_cube_root(n: float, eps: float) -> float:
    left = 0
    sec = 0 
    ans = 0 
    min = 0
    if n < 0:
        n = -n
        min = 1
    right = n
    while 1:
        sec = (right + left) / 2
        if sec * sec * sec > n:
            right = sec
        else:
            left = sec  
            right = sec * 2
        ans = right * right * right 
        if abs(ans-n)<eps:
            if min == 1 : right = -right 
            return right

print(get_cube_root(27, 1e-10))




def length (num : int):
    ans = 0 
    if num == 0 : return 1
    while num !=0:
        num = num // 10 
        ans+=1 
    return ans 

def get_nth_digit(num: int) -> int:
    digits = 0 
    sequence = 0 
    ans = 0 
    if num < 6: return num*2-2
    while 1:
        
        digits += length(sequence)
        
        if digits >= num:
            sequence = sequence // (10 ** (digits-num))
            ans = sequence % 10
            return ans 
        
        sequence += 2
        
        
print(get_nth_digit(10))

